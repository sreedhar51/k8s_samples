network policy: default-deny
==================================
You have been given access to a three-node cluster. You will be responsible for creating a deployment and a service to serve as a front end for a web application. In addition to the web application, you must deploy a Redis database and make sure the web application can only access this database using the default port of 6379. You will first create a default-deny network policy, so all pods within your Kubernetes are not able to communicate with each other by default. Then you will create a second network policy that specifies the communication on port 6379 between the web application and the database using their label selectors. You must apply these specifications to your resources in order to complete this hands-on lab:

Create a deployment named webfront-deploy.
The deployment should use the image nginx with the tag 1.7.8.
The deployment should expose container port 80 on each pod and contain 2 replicas.
Create a service named webfront-service and expose port 80, target port 80.
The service should be exposed externally by listening on port 30080 on each node.
Create one pod named db-redis using the image redis and the tag latest.
Verify that you can communicate to pods by default.
Create a network policy named default-deny that will deny pod communication by default.
Verify that you can no longer communicate between pods.
Apply the label role=frontend to the web application pods and the label role=db to the database pod.
Create a network policy that will apply an ingress rule for the pods labeled with role=db to allow traffic on port 6379 from the pods labeled role=frontend.
Verify that you have applied the correct labels and created the correct network policies.

Create a deployment and a service to expose your web front end.
--------------------------------------------------------------
Use the following command to create the YAML for your deployment:

 kubectl create deployment webfront-deploy  --image=nginx:1.7.8  --dry-run -o yaml > webfront-deploy.yaml
 
Add the following to your YAML in order to expose the container port:

 - containerPort:80
Use the following command to create your deployment:

 kubectl apply -f webfront-deploy.yaml
Use the following command to scale up your deployment:

 kubectl scale deployment/webfront-deploy --replicas=2
Use the following command to create the YAML for a service:

 kubectl expose deployment/webfront --port=80 --target-port=80 --type=NodePort --dry-run -o yaml > webfront-service.yaml
Add the following to the YAML for the service:

 name: webfront-service
 nodePort: 30080
Use the following command to create the service:

 kubectl apply -f webfront-service.yaml
Verify that you can communicate with your pod directly:

 kubectl run busybox --rm -it --image=busybox /bin/sh
 # wget -O- <pod_ip_address>:80
 # wget --spider --timeout=1 webfront-service
 
 
 Create a database server to serve as the backend database.
-----------------
Use the following command to create a Redis pod:

kubectl run db-redis --image=redis --restart=Never


network policy
---------------

Use the following YAML (this is where you can use kubernetes.io and search "network policies" and then search for the text "default"):

 apiVersion: networking.k8s.io/v1
 kind: NetworkPolicy
 metadata:
   name: default-deny
 spec:
   podSelector: {}
   policyTypes:
   - Ingress
Use the following command to apply the network policy:

 kubectl apply default-deny.yaml
Verify that communication has been disabled by default:

 kubectl run busybox --rm -it --image=busybox /bin/sh
 # wget -O- <pod_ip_address>:80

 
 Apply the network policy
 --------------------------
 
 Apply the labels and create a communication over port 6379 to the database server.
keyboard_arrow_up
Use the following commands to apply the labels:

 kubectl get po
 kubectl label po <pod_name> role=frontend
 kubectl label po db-redis role=db
 kubectl get po --show-labels
Use the following YAML to create a network policy for the communication between the two labeled pods (copy from kubernetes.io website):

 apiVersion: networking.k8s.io/v1
 kind: NetworkPolicy
 metadata:
   name: redis-netpolicy
 spec:
   podSelector:
     matchLabels:
       role: db
   ingress:
   - from:
     - podSelector:
         matchLabels:
           role: frontend
     ports:
     - port: 6379
Use the following command to create the network policy:

 kubectl apply -f redis-netpolicy.yaml
Use the following command to view the network policies:

 kubectl get netpol
Use the following command to describe the custom network policy:

 kubectl describe netpol redis-netpolicy
Use the following command to show the labels on the pods:

 kubectl get po --show-labels